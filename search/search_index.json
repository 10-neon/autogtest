{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"autogtest","text":"<p>Autogtest is a CLI tool for auto-generating Google Mock test code from C++ header files.</p> <ul> <li>Github repository: https://github.com/10-neon/autogtest/</li> <li>Documentation https://10-neon.github.io/autogtest/</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Automatically generates Google Mock classes from C++ abstract interfaces</li> <li>Supports both single file and batch processing modes</li> <li>Customizable Jinja2 templates for mock generation</li> <li>Handles nested namespaces and nested class</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install autogtest\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Generate mock for a single header:</p> <pre><code>autogtest path/to/header.h --mock output/mock.h --include base/include\n</code></pre> <p>Batch process a directory:</p> <pre><code>autogtest path/to/headers/ --mock output/mocks/ --include base/include\n</code></pre>"},{"location":"#command-options","title":"Command Options","text":"<pre><code>autogtest [HEADER]\n  --mock TEXT     Output path (file or directory)\n  --include TEXT  Base include directory\n  --template TEXT Custom template path\n</code></pre>"},{"location":"modules/","title":"Modules","text":"<p>CLI tool for auto-generating Google Mock test code from C++ header files.</p> <p>This module provides a command-line interface for automatically generating Google Mock test code from C++ headers.</p>"},{"location":"modules/#autogtest.cli.GMockClassModel","title":"<code>GMockClassModel</code>","text":"<p>Represents a Google Mock class model.</p> <p>Attributes:</p> Name Type Description <code>classname</code> <code>str</code> <p>Class name</p> <code>parent_class</code> <code>Optional[GMockClassModel]</code> <p>Parent class (if any)</p> <code>namespace</code> <code>str</code> <p>Namespace</p> <code>mock_methods</code> <code>list[GMockMethod]</code> <p>List of mock methods</p> Source code in <code>src/autogtest/cli.py</code> <pre><code>class GMockClassModel:\n    \"\"\"Represents a Google Mock class model.\n\n    Attributes:\n        classname: Class name\n        parent_class: Parent class (if any)\n        namespace: Namespace\n        mock_methods: List of mock methods\n    \"\"\"\n\n    def __init__(self, classname: str, namespace: str) -&gt; None:\n        self.classname: str = classname\n        self.parent_class: Optional[GMockClassModel] = None\n        self.namespace: str = namespace\n        self.mock_methods: list[GMockMethod] = []\n\n    def getClassname(self) -&gt; str:\n        if self.parent_class:\n            return self.parent_class.getClassname() + \"::\" + self.classname\n        return self.classname\n\n    def getMockClassname(self) -&gt; str:\n        mock_classname_parts: list[str] = self.getClassname().split(\"::\")\n        mock_classname_parts[-1] = mock_classname_parts[-1].removeprefix(\"I\")\n        mock_classname_parts[-1] = mock_classname_parts[-1].removesuffix(\"Interface\")\n        mock_classname: str = \"::\".join(mock_classname_parts)\n        mock_classname += \"Mock\"\n        return mock_classname\n\n    def tryAddGMockMethod(self, method_scope: Method) -&gt; bool:\n        if not method_scope.pure_virtual:\n            return False\n        mock_method = GMockMethod(method_scope.name.format())\n        for param in method_scope.parameters:\n            mock_method.params.append(param.format())\n        if method_scope.return_type is None:\n            mock_method.ret = \"void\"\n        else:\n            mock_method.ret = method_scope.return_type.format()\n        if method_scope.const:\n            mock_method.qualifier.append(\"const\")\n        if method_scope.constexpr:\n            mock_method.qualifier.append(\"constexpr\")\n        if method_scope.noexcept:\n            mock_method.qualifier.append(\"noexcept\")\n        if method_scope.ref_qualifier:\n            mock_method.qualifier.append(\"&amp;&amp;\")\n        self.mock_methods.append(mock_method)\n        return True\n\n    def json(self) -&gt; dict:\n        return {\n            \"namespace\": self.namespace,\n            \"name\": self.getMockClassname(),\n            \"interface\": self.getClassname(),\n            \"methods\": [method.format() for method in self.mock_methods],\n        }\n\n    def format(self) -&gt; str:\n        methods_section = \"\\n    \".join([method.format() for method in self.mock_methods])\n        return f\"\"\"namespace {self.namespace} {{\n\nclass {self.getMockClassname()}Mock: public {self.getClassname()} {{\npublic:\n    {methods_section}\n}};\n\n}} // namespace {self.namespace}\n\"\"\"\n</code></pre>"},{"location":"modules/#autogtest.cli.GMockMethod","title":"<code>GMockMethod</code>","text":"<p>Represents a Google Mock method model.</p> <p>Attributes:</p> Name Type Description <code>name</code> <p>Method name</p> <code>qualifier</code> <code>list[str]</code> <p>Method qualifiers (e.g. override, const)</p> <code>params</code> <code>list[str]</code> <p>Method parameters</p> <code>ret</code> <code>str</code> <p>Return type</p> Source code in <code>src/autogtest/cli.py</code> <pre><code>class GMockMethod:\n    \"\"\"Represents a Google Mock method model.\n\n    Attributes:\n        name: Method name\n        qualifier: Method qualifiers (e.g. override, const)\n        params: Method parameters\n        ret: Return type\n    \"\"\"\n\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n        self.qualifier: list[str] = [\"override\"]\n        self.params: list[str] = []\n        self.ret: str = \"\"\n\n    def format(self) -&gt; str:\n        params_str = \", \".join(self.params)\n        qualifier_str = \" \".join(self.qualifier)\n        return f\"MOCK_METHOD({self.ret}, {self.name}, ({params_str}), ({qualifier_str}));\"\n</code></pre>"},{"location":"modules/#autogtest.cli.MockGenerator","title":"<code>MockGenerator</code>","text":"<p>Generates Google Mock class models from parsed C++ header data.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>ParsedData</code> <p>Parsed C++ header data</p> <code>namespace</code> <code>list[str]</code> <p>Current namespace stack</p> <code>classes</code> <code>list[GMockClassModel]</code> <p>Generated mock classes</p> Source code in <code>src/autogtest/cli.py</code> <pre><code>class MockGenerator:\n    \"\"\"Generates Google Mock class models from parsed C++ header data.\n\n    Attributes:\n        data: Parsed C++ header data\n        namespace: Current namespace stack\n        classes: Generated mock classes\n    \"\"\"\n\n    def __init__(self, data: ParsedData) -&gt; None:\n        self.data: ParsedData = data\n        self.namespace: list[str] = []\n        self.classes: list[GMockClassModel] = []\n\n    def parse(self) -&gt; None:\n        self.visitNamespaceScope(self.data.namespace)\n\n    def visitNamespaceScope(self, namespace_scope: NamespaceScope) -&gt; None:\n        self.namespace.append(namespace_scope.name)\n        for class_scope in namespace_scope.classes:\n            self.visitClassScope(class_scope=class_scope, parent_class=None)\n\n        for _child_namespace_name, child_namespace_scope in namespace_scope.namespaces.items():\n            self.visitNamespaceScope(namespace_scope=child_namespace_scope)\n        self.namespace.pop()\n\n    def visitClassScope(self, class_scope: ClassScope, parent_class: Optional[GMockClassModel]) -&gt; None:\n        mock_class = self.tryAddMockClassModel(class_scope=class_scope, parent_class=parent_class)\n        for child_class_scope in class_scope.classes:\n            self.visitClassScope(class_scope=child_class_scope, parent_class=mock_class)\n\n    def isTargetClass(self, class_scope: ClassScope) -&gt; bool:\n        return any(method.pure_virtual for method in class_scope.methods)\n\n    def tryAddMockClassModel(\n        self, class_scope: ClassScope, parent_class: Optional[GMockClassModel] = None\n    ) -&gt; GMockClassModel:\n        mock_class = GMockClassModel(\n            classname=self.classname(class_scope=class_scope), namespace=self.currentNamespace()\n        )\n        mock_class.parent_class = parent_class\n        [mock_class.tryAddGMockMethod(method) for method in class_scope.methods]\n        if self.isTargetClass(class_scope=class_scope):\n            self.classes.append(mock_class)\n        return mock_class\n\n    def classname(self, class_scope: ClassScope) -&gt; str:\n        return class_scope.class_decl.typename.format().replace(\"class \", \"\").replace(\"struct \", \"\")\n\n    def currentNamespace(self) -&gt; str:\n        return \"::\".join(self.namespace).removeprefix(\"::\")\n</code></pre>"},{"location":"modules/#autogtest.cli.create_gmock_file","title":"<code>create_gmock_file(header, output, include, template)</code>","text":"<p>Generate mock file from a single header.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Input header path</p> required <code>output</code> <code>str</code> <p>Output mock file path</p> required <code>include</code> <code>str</code> <p>Include base directory</p> required <code>template</code> <code>Template</code> <p>Jinja2 template to use</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if mock file was generated successfully</p> Source code in <code>src/autogtest/cli.py</code> <pre><code>def create_gmock_file(header: str, output: str, include: str, template: Template) -&gt; bool:\n    \"\"\"Generate mock file from a single header.\n\n    Args:\n        header: Input header path\n        output: Output mock file path\n        include: Include base directory\n        template: Jinja2 template to use\n\n    Returns:\n        bool: True if mock file was generated successfully\n    \"\"\"\n    if not header.endswith(\".h\") and not header.endswith(\".hpp\"):\n        return False\n    generator = MockGenerator(data=parse_file(filename=header))\n    generator.parse()\n    if len(generator.classes) == 0:\n        return False\n    json_mock_classes = [mock_class.json() for mock_class in generator.classes]\n\n    context = template.render({\"gmock_data\": json_mock_classes, \"header\": os.path.relpath(header, include)})\n    write_file_if_not_exist(filepath=output, content=context)\n    return True\n</code></pre>"},{"location":"modules/#autogtest.cli.create_gmock_files_batch","title":"<code>create_gmock_files_batch(header_dir, mock_dir, include, template)</code>","text":"<p>Batch generate mock files from directory headers.</p> <p>Parameters:</p> Name Type Description Default <code>header_dir</code> <code>str</code> <p>Input header directory</p> required <code>mock_dir</code> <code>str</code> <p>Output mock directory</p> required <code>include</code> <code>str</code> <p>Include base directory</p> required <code>template</code> <code>Template</code> <p>Jinja2 template</p> required Source code in <code>src/autogtest/cli.py</code> <pre><code>def create_gmock_files_batch(header_dir: str, mock_dir: str, include: str, template: Template) -&gt; None:\n    \"\"\"Batch generate mock files from directory headers.\n\n    Args:\n        header_dir: Input header directory\n        mock_dir: Output mock directory\n        include: Include base directory\n        template: Jinja2 template\n    \"\"\"\n    for root, _, files in os.walk(header_dir):\n        for file in files:\n            if file.endswith(\".h\") or file.endswith(\".hpp\"):\n                header = os.path.join(root, file)\n                header_relative_path = os.path.relpath(header, header_dir)\n                mock_relative_path = header_relative_path.replace(\".h\", \"_mock.h\").replace(\".hpp\", \"_mock.hpp\")\n                mock = os.path.join(mock_dir, mock_relative_path)\n                create_gmock_file(header=header, output=mock, include=include, template=template)\n</code></pre>"},{"location":"modules/#autogtest.cli.gmock","title":"<code>gmock(header, mock, include, template=None)</code>","text":"<p>Generate Google Mock code from C++ headers.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>Annotated[str, Argument(help='Directory or C++ header file containing the header files')]</code> <p>Input header/directory</p> required <code>mock</code> <code>Annotated[str, Option(help='Output path for mock files')]</code> <p>Output mock file/directory</p> required <code>include</code> <code>Annotated[str, Option(help='Base include directory')]</code> <p>Base include directory</p> required <code>template</code> <code>Annotated[Optional[str], Option(help='Path to custom Jinja2 template')]</code> <p>Optional custom template path</p> <code>None</code> Source code in <code>src/autogtest/cli.py</code> <pre><code>@app.command()\ndef gmock(\n    header: Annotated[str, typer.Argument(help=\"Directory or C++ header file containing the header files\")],\n    mock: Annotated[str, typer.Option(help=\"Output path for mock files\")],\n    include: Annotated[str, typer.Option(help=\"Base include directory\")],\n    template: Annotated[Optional[str], typer.Option(help=\"Path to custom Jinja2 template\")] = None,\n) -&gt; None:\n    \"\"\"Generate Google Mock code from C++ headers.\n\n    Args:\n        header: Input header/directory\n        mock: Output mock file/directory\n        include: Base include directory\n        template: Optional custom template path\n    \"\"\"\n    header = os.path.abspath(header)\n    mock = os.path.abspath(mock)\n    include = os.path.abspath(include)\n\n    print(\n        f\"auto gmock, header: {header}, mock: {mock}, template: {template if template else 'None'}, include: {include}\"\n    )\n    if template:\n        template = os.path.abspath(template)\n        env = Environment(loader=FileSystemLoader(os.path.dirname(template)), autoescape=True)\n        jinja2_template: Template = env.get_template(os.path.basename(template))\n    else:\n        env = Environment(loader=BaseLoader(), autoescape=True)\n        jinja2_template = env.from_string(jinja2_default_template)\n\n    if os.path.isdir(header):\n        create_gmock_files_batch(header_dir=header, mock_dir=mock, include=include, template=jinja2_template)\n    else:\n        create_gmock_file(header=header, output=mock, include=include, template=jinja2_template)\n</code></pre>"},{"location":"modules/#autogtest.cli.write_file_if_not_exist","title":"<code>write_file_if_not_exist(filepath, content)</code>","text":"<p>Write content to file if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to file</p> required <code>content</code> <code>str</code> <p>Content to write</p> required Source code in <code>src/autogtest/cli.py</code> <pre><code>def write_file_if_not_exist(filepath: str, content: str) -&gt; None:\n    \"\"\"Write content to file if it doesn't exist.\n\n    Args:\n        filepath: Path to file\n        content: Content to write\n    \"\"\"\n    directory = os.path.dirname(filepath)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    if not os.path.exists(filepath):\n        with open(filepath, \"w\") as file:\n            file.write(content)\n</code></pre>"}]}